***Understanding Command Line Basics 
####Exploring Your Linux Shell Options
The shell is used to enter commands and there are a variety of shells. 
-bash: bash is hte most common default shll for user accounts, and it's the one emphasized in this book. 
-sh: The Bourne shell upon which bash is based goes bythe name sh. It's not often used in Linux and the sh command is often a pointer to the bash shell or other shells.
-tcsh: This shell is based on the earlier C shell(csh), popular in some circles
-csh: The original C shell isnt used much on Linux
-ksh: The Korn shell(ksh) was designed to take the best features of the Bourne shell and the C shell and extend them. 
-zsh: The Z shell(zsh)adds more improvents from the Korn shell

There are two types of default shells. The defaults interactives shell is the shell program a user users to enter comamnds, run programs from the command line, run shell scripts, and so on. The other default shell tpe is a default system shell. The default system shell is used by the Linux system to run system shell scripts, typically at startup. 

The file bin/sh is a pointer to the systems default system shell.

####Starting a Shell
ONce you start a terminal or log into a virtual console terminal, the shell will provide you with a prompt for entering commands. Remember that the shell is a program providing you with an interface to the Linux system. 

A good first command to try, uname, will show you what operating system is being run

$ uname
Linux
$

That's not too interesting, you can find out more by tacking on the -a option to the command. 

$ uname -a
[output]
$

####Using Internal and External Commands
Internal commands are commands built into the Shell program. Thus they are also called built-in commands. Most shells offer a similar set of internal commands, but shell-to-shell differences do exist. 

Change the Working Directory: 
$ cd /var/ftp

A shortcut to your home directory
$cd ~

Display the working directory:
$pwd

Display a line of text:
The echo command displays the text you enter. This may seem pointless but is usefull for scripts.
$echo Hello
hello
$

Time an Operation:
The time command times how long subsequent commands take to execute. For instance, typing time pwd tells you how long the system take to execute. 

Three times are displayed, total execution time, user CPU time, and system CPU time. 

$time pwd
/home/ubuntu
real  0m0.000s
user  0m0.000s
sys   0m0.000s

Set Options:
The set command displays a wide variety of options relating to bash shell operation. 

Terminate the Shell:
The exit and logout commands both terminate the shell. The exit command terminates any shell, but the logout command terminates only login shells. 

Login shells are shell programs that are launched automatically when you initiate a text mode login as opposed ot those that run in xterm windows or other terminal emulators. 

Determining if a command is a built in command:
You can determine if a command is a built in command by using the type command.
$type pwd
pwd is a shell builtin
$
$type cd
cd is a shell builtin

####Performing Some Shell Command Tricks
Command Completion: 
  Type part of the word/command and press the TAB key
History: 
  The shell history keeps a record of every command you type.
  You can execute a command by number by typing ! followed by a number
  An example would be !210
  You can clear history by running history -c
Retrieve a command: 
  You can use the Up arrow repeatdely to find a previously type command
Search for a Command: 
  Press Ctrl + R to begin a backward (reverse) search, and begin typing characters that should be unique to the command you want.
  Press Ctrl+ S to search forward in the command history 
Move within the line: 
  Press Ctrl+A or Ctrl+E to move to the start/end of the line respectively. 
  Pressing Ctrl plus the Left or Right arrow key moves backward or forward a word at a time 
Delete text: 
  Pressing Ctrl+D or the delete key deletes the character under the cursor. 
  Pressing the Backspace key deletes the character left of the cursor. 
  Pressing Ctrl+K deletes all text from the cursor to the end of the line. 
  Pressing Ctrl+X and then Backspace deletes all of the text from the cursor to the begining of the line. 
Transpose Text:
  Pressing Ctrl+T transposes the character before the cursor with the characters under the cursor.
  Pressing Esc and then T transposes the two words immediately before (or under) the cursor. 
Changing Case:
  Pressing Esc and then U converts text from teh cursor to the end of the word to uppercase. 
  Pressing Esc and then L converts text from the cursor to the end of the word to lowercase. 
  Pressing Esc and then C converts the letter under the cursor to uppercase, leaving the rest of the word unaffected. 
Invoke an Editor:
  Pressing Ctrl+X followed by Ctrl+E launches a full-fledged editor. 
  It launchs the editor defined by $FCEDIT, $EDITOR, or Emacs as a last resort. 
  
 History: 
  History command shows history
  To get latest command type !! and enter
  You can execute a command by number via typing and an exclamation mark as in !210
  
 ****Exploring Shell Configuration****
Shells like many Linux programs are configured through files that hold configuration options in a plain-text format. The bash configuration files are atually bash shell scripts. 
A copule of examples of these configuration files are ~/.bashrc and /etc/profile

****Using Enviroment Variables****
Environment variables are like variables in programming languages-they hold data to be referred to by the variable name. 
Enviroment variables differ from programs internal variables in that they're part of the programs enviroment. 

You can set them in bash by using an assignment(=) operator followed by the export command. 

$ 
$ PS1="my New Prompt: "
My New Prompt: export PS1
My New Prompt:

You can combine these two commands into a signle form:
My New Prompt: export PS1="Prompt: "
Prompt:
Prompt:

When setting an enviroment variable you omit the dollar sign but subsequent references include a dollar sign to identify the enviroment variable as such. 

$ Prompt: echo $PS1
Prompt:

An echo of the prompt command can be a littel confusing because it just shows your current prompt setting. You can get a better feel for displaying an environment by using echo:
Prompt: echo $PATH

To delete a enviroment varialbe use the unset command.

****GETTING HELP****
You can use the man command to get help

To get help from man you can type
man man

You aren't stuck with using the less pager with the man utitly. You can change this using the -P option. 

If you wanted to use more on the uname command you coulld run 
man -P /bin/more uname

If you can't remember the command you are looking for you can use the -k option to help look the command up
$ man -k "system information"

Some programs use info pages instead because of hypertext format
info info

Also there are pages specifically for the built in commands
help pwd
help help

****USING STREAMS, REDIRECTION, and PIPES****
Exploring file descriptors:
  Standard input:Information that comes from the keyboard. File descriptor is 0
  Standard output:Standard output is normally displayed on the screen. File descriptor is 1
  Standard error: Another output stream that shows error. File descriptor is 2. 
  
****Redirecting Input and Output****
To redirect output, you use operators following the command, including any options it takes. 

$ echo $PATH 1 > path.txt
$
$ cat path.txt

Result is that the file path.txt contains the output of the command. Operator used was > and file descriptor was 1

You can leave out the file descriptor
$ echo $PATH > another_path.txt

Common redirection operators
  >: Creates a new file containg standard output. If the specified file exists, it is overwritten.
  >>:Apppends standards output to existing file.
  2>:Creats a new file containing standard error. File descriptor necessary and overwrites existing file
  2>:Same as above but appends to existing file
  &>:Creates a new file containg both standard output and standard error. File is overwritten if it exists
  <: Send the content of the specified file to be used as standard input.
  <<:Accepts text on the follwoign lines as standard input. 
  <>:Causes the specified file to be used for both standard input and standard output.
  
 A common trick is to redirect standard error to /dev/null
 $ whine 2> /dev/null
 
 ****Piping Data between Programs****
 Programs can frequently operate on other programs' outputs. 
 A pipe redirects the first programs standard output to the second porgrams standard input, and it is dentoed by a vertical bar (|):
 $ first | second
 
 Pipes can be used in sequences of arbitrary lengths
 $ first | second | third
 
 Another redirection command frequently used is the tee command. The command splits standard input so that its displayed on standard output and in as many files as you can specify.
$echo $PATH |tee path.txt

The output would be shown and path.txt would be created. 

****GENERATING COMMAND LINES****
The xargs command builds a command from its standard input. 
xargs [options] [command[initial-arguments]]

The options are xargs options; they arent passed to command.

Consider the task of deleting several files that belong to a particular usesr. 

# find / -user Christine | xargs -d "\n" rm

The first part of this command(find /-user Christine) finds all of the files in directory tree(/) and its subdirectories that belong to user Christine. 

The list is piped to xargs which adds each input value to its own rm command. 
The -d "\n" option tells xargs to use only newlines as delimiters

You can also use backtick(`) the key to the left of the one key although this is failing out of favor

rm `find ./ =user Christine`

****PROCESSING TEXT USING FILTERS*****
Combing files with cat(concatenate)
-Links together an arbitrary number of files end to end and send the result to standard output

$cat first.txt second.txt > combined.txt

Can also view files with cat but for larger files another command wouuld be better.
Some common options
Display Line Ends: -E --show-ends
Number Lines: -n or --number
Minimize blank lines: -s or --squeeze-blank
Display Special Chracters: -T or --show-tabs

The command tac just reverse the order of lines in the output
$ tac combined.txt

----Joining Files by Filed with join----
The join command combines two files by matching the contents of specified fields within the file. 

Example A
555 Beckett, Barry
666 Carter , Gertrude
777 Jones, Theresa
888 Orwell , Samuel

Example B
555 unlisted
666 listed
777 listed
888 unlisted

$join exampleA.txt exampleB.txt
555 Beckett, Barry unlisted
666 Carter , Gertrude listed
777 Jones, Theresa listed
888 Orwell , Samuel unlisted

You can also specifiy what to join
$ join -1 3 -2 2 cameras.txt lenses.txt

This 
-Joins using the third field in cameras.txt AND
-Joins using the second field in lenses.txt

----Merging Lines with paste----
The paste command merges files line by line serparting the linese form each file with tabs using the examples above

$ paste listing1.1.txt listing1.2.txt
555 Beckett, Barry  555 unlisted  
666 Carter , Gertrude 666 listed
777 Jones, Theresa  777 listed
888 Orwell , Samuel 888 unlisted

****FILE TRANSFORMING COMMANDS****
----Converting Tabs to Spaces with expand----
Sometimes text files contain tabs but programs that need to process the files don't cope well with tabs. 

$ expand

----DISPLAYING FILES IN OCTAL with od----
Some files aren't easily displayed in ASCII so you can use octal

$od listing1.2.txt
00000000 ....

----SORTING FILES WITH sort-----
Sometimes you create an output file that you want sorted. sort can sort in serveral ways
Ignore Case: -f or --ignore-case
Month Sort: -M 
Numeric sort: -n or --numeric-sort
Reverse sort order: -r or --reverse
Sort Field: -k /by default uses first field can specify field with -k 3

----BREAKING A FILE INTO PIECES WITH split----
The split command can split a file into two or more files. 
Split by Bytes: -b
Split by Bytes in Line-Sized Chunks:-C=size 
Split by Number of Lines: -l lines

An example
$ split 0l 2 listing1.1.txt numbers

Result is two files numbersaa and numbersab which together hold the original contents of listing1.1.txt

----Translating Characters WITH tr----
The tr command changes individual character from standard input. 

tr [options] SET1 [SET2]

An example is 
tr BCJ bc < listing1.1.txt

bckett, barry
carter, Gertrude
cones, Theresa
Orwell, Samuel

Where the Captial B's and C's were changed to lowercase. 

However "cones" should be Jones

You can use 
-t to match the first set to the second set. 

----Converting Spaces to Tabs with unexpand----
The unexpand command is the opposite of expand; it converts multiple spaces to tabs. 

----DELETING DUPLICATES LINES WITH uniq----
uniq command removes duplicate lines. 

In the example of a file with the following lines "To be or not to be, that is the question" (One word per line)

$ sort shakespeare.txt | uniq
be
is
not
or
question
that
the
to

Words "to" and "be" which appeared in the original file twice, appear only once in the uniq-processed version. 

****FILE-FORMATTING COMMANDS****
----Reformating Paragrapsh with fmt----
Sometimes files come with long line lengths, irregular line lengths or other problems. 

You can use fmt to clean up paragraphs which it assumes are delimited by two or more blank lines or by changes in indentation.

----Numbering Lines with nl-----
Used to number lines in a file with many options

Body Numbering Style:You can set the numbering sytle for the bulk of the lines with the -b style 
Header and Footer Numbering Style:If the text is formatted for printing and has header/footer you can use 
-h style (For Header)
-f style (For Footer)

Page Seperator: Some numbering schemes reset the line number for each page. Use nl to identify a new page with the -d code

Line-Number Options for New Pages: Ordinarily nl begins bumbering each new page with line 1. If you pass the -p it does not reset the numbering

Number format: You can specify number fortmat with the -n format where format is ln(left justified), rn(right justifie dno leading zero's) or rz(right justified, with leading zero's)

STYLES USED BY nl
t:Default behavior to not number empty lines
a:All lines are numbered
n:All line numbers are ommited(Desirable for header/footer)
pREGEXP: Causes only lines that match the specified REGEXP to be numbered

Example: You create a line script that has errors and when you run it you get reference to line numbers so you want to add lines. 

nl -b a buggy > numbered-buggy.txt

----Preparing a File for Printing with pr----
If you want to print a plain text file you may want to prepare it with headers, footers, page breaks, etc

Most basic form is 
$ pr myfile.txt

By default, pr creates output that includes the original tet tih headers, which lists the current date and time, the orginal filename and page number.

****FILE-VIEWING COMMANDS****
----Viewing the starts of Files with head----
Head command echoes the first 10 lines of one or more files to standard output. You can modify the info in 2 ways
-Specifiy the number of bytes: -c or --bytes=num
-Specifiy the number of lines: -n num or --lines=num

----Viewing the end of Files with tail----
Works just like head but displays the last ten lines

Supports several options that are not present in head that are helpful
-Track a file: -f, tells tails to keep file open and display new lines as they are added. Good for log files.
-Stop tracking on Program termination: --pid=pid tells tail to terminate tracking(as iniated by -f or --follow) once process of pid terminates

----Paging through files with less----
The idea behind less is to enabled you to read a file a screen at a time.
-Space moves forward through the file a screen at a time
-UP/Down one line at a time
-Seach by doing (/) follwod by search term
-Search backward by using (?)
-Move to specific line with (g) as in g50 for line 50
-q to quit

****FILE-SUMMARIZING COMMANDS****
----Extracting text with cut----
Cut command extracts portions of input lines and displays them on standard output. 

You can specifiy what to cut from input lines in several ways:
-By Byte: -b list cuts the specified list of bytes from the input file
-By Character: -c list cuts the specified list of characters from the input file.
-By Field: -f list cuts the specified list of filed from the input file.

Many of these options take a list option, which is a way to specifiy multiple bytes/characters/fields.
You make this specification by number which can be a single number(4), a closed range(2-4), or an open range(4-)

----Obtaining a Word Count with wc----
The wc command produces a word count as well as line and by counts for a file:
$wc file.txt
308 2343 15534 file.txt

****USING REGULAR EXPRESSIONS****
----Understanding Regular Expressions----
Regular expressions are tools for describing or matching patterns in text. 
Two forms of regular expressions are common, basic and extended.

The strength of Regex comes from the use of nonalphabetic characters. 

Bracket Expressions: Characters enclosed in square brackets([]) match any one character within the brackets. 
                     Example would be b[aeiou]g which matches the word bag, beg, big, bog, and bug
                     
Range Expressions:Variant of the bracket expression. Range expressions list the start and end points seperated by a day
                  Example would be a[2-4] which matches a2z, a3z, and a4z. 
                  
Any single character:The dot (.) represents any single character except a newline. 
                     Example a.z matches a2z, abz, aQz or any three character string that begins with a and ends with z
                     
Start and End of a line: The carat(^) represent the start of a line, and the dollar sign($) denotes the end of a line

Repetition Operators:A full or partial regex may be follwed by a special symbol to denote how many times a matching item must exist.
                     Asterik (*) denotes zero or more occurences
                     Plus sign (+) matches one or more occurences
                     Question (?) specifies zero or one match
                     
                     Asterik is often usen to specify a match within a substring. A.*Lincoln matchs any string that contains A and                            Lincoln, in that order
 
 Multiple Possible Strings: Vertical bar (|) separates two possible matches; for instance car\truck matches either car or truck. 
 
 Parentheses: Ordinary parenthese (()) surround subexpressions. Often used to specify how opeartors are to be applied. 
              For example you can plut parentheses around a group of wrods that are concatenated with the vertical bar to ensure the                   words are treated as a group.  
              
Escaping: IF you want to match one of the special characters you must escape it. To match a computer hostname twain\.example\.com

----Using grep----
The grep command searches for files that contain a specified string and returns the name of the file and if its a text file the context for the string. 

The basic grep syntax

grep [options] regexp [files]

The grep command supports a large number of options 

Count matching lines: -c, dispalys the number of lines that match the specified pattern. 
Ignore Case: -i, to not search case sensitively. 
Search Recursively: -r, searches in the specified directory and all subdirectories. You can also use rgrep
Use a Fixed Strings Pattern:-F to use basic pattern searching. You can also use fgrep
Use an extended regex: -E, or use egrep

----Using sed----
Sed command directly modifies a file's contents, sending the changed file to standard output. 

sed [options] -f script-file [input-file]
sed options script-text [input-file]

Input file is the name of the file you want to modify.
Script is the set of command you want sed to perform. 

Common sed commands
Command              Addresses   Meaning
=                    0 or 1      Display the current line number
a\text               0 or 1      Append text to the file
i\text               0 or 1      Insert text into the file
r filename           0 or 1      Append text from filename into the file
c\text               Range       Replace the selected range of lines with the provided text.
s/regexp/replacement Range       Replace text that matches the regexp with replacement
w filename           Range       Write the current pattern space to the specified file
q                    0 or 1      Immediately quit the script but priint the current pattern space
Q                    0 or 1      Immediately quit the script 

The address column needs elaboration. sed commands operate on addresses which are line numbers. Commands may take no addresses in which case they operate on the entire file. If one address is specified, they opearte on the specified line. If a range is specified, the commands opeare 




 
 
